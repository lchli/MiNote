package com.lch.menote.note.data.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lch.menote.note.domain.Note;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NOTE".
*/
public class NoteDao extends AbstractDao<Note, String> {

    public static final String TABLENAME = "NOTE";

    /**
     * Properties of entity Note.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ImagesDir = new Property(0, String.class, "imagesDir", false, "IMAGES_DIR");
        public final static Property Content = new Property(1, String.class, "content", false, "CONTENT");
        public final static Property LastModifyTime = new Property(2, String.class, "lastModifyTime", false, "LAST_MODIFY_TIME");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property Type = new Property(4, String.class, "type", false, "TYPE");
        public final static Property ThumbNail = new Property(5, String.class, "thumbNail", false, "THUMB_NAIL");
        public final static Property Uid = new Property(6, String.class, "uid", true, "UID");
        public final static Property UserId = new Property(7, String.class, "userId", false, "USER_ID");
    }


    public NoteDao(DaoConfig config) {
        super(config);
    }
    
    public NoteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NOTE\" (" + //
                "\"IMAGES_DIR\" TEXT," + // 0: imagesDir
                "\"CONTENT\" TEXT," + // 1: content
                "\"LAST_MODIFY_TIME\" TEXT," + // 2: lastModifyTime
                "\"TITLE\" TEXT," + // 3: title
                "\"TYPE\" TEXT," + // 4: type
                "\"THUMB_NAIL\" TEXT," + // 5: thumbNail
                "\"UID\" TEXT PRIMARY KEY NOT NULL ," + // 6: uid
                "\"USER_ID\" TEXT);"); // 7: userId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NOTE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Note entity) {
        stmt.clearBindings();
 
        String imagesDir = entity.getImagesDir();
        if (imagesDir != null) {
            stmt.bindString(1, imagesDir);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(2, content);
        }
 
        String lastModifyTime = entity.getLastModifyTime();
        if (lastModifyTime != null) {
            stmt.bindString(3, lastModifyTime);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(5, type);
        }
 
        String thumbNail = entity.getThumbNail();
        if (thumbNail != null) {
            stmt.bindString(6, thumbNail);
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(7, uid);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(8, userId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Note entity) {
        stmt.clearBindings();
 
        String imagesDir = entity.getImagesDir();
        if (imagesDir != null) {
            stmt.bindString(1, imagesDir);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(2, content);
        }
 
        String lastModifyTime = entity.getLastModifyTime();
        if (lastModifyTime != null) {
            stmt.bindString(3, lastModifyTime);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(5, type);
        }
 
        String thumbNail = entity.getThumbNail();
        if (thumbNail != null) {
            stmt.bindString(6, thumbNail);
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(7, uid);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(8, userId);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6);
    }    

    @Override
    public Note readEntity(Cursor cursor, int offset) {
        Note entity = new Note( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // imagesDir
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // content
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // lastModifyTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // type
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // thumbNail
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // uid
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // userId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Note entity, int offset) {
        entity.setImagesDir(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setContent(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLastModifyTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setThumbNail(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUid(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUserId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Note entity, long rowId) {
        return entity.getUid();
    }
    
    @Override
    public String getKey(Note entity) {
        if(entity != null) {
            return entity.getUid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Note entity) {
        return entity.getUid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
